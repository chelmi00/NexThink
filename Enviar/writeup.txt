In the first challenge, I noticed that not having a test environment was a problem for me. I'm used to testing and debugging to get my code to work. However, let me explain my code:
First of all, I discover the color I will have to work with, with the supposition written as a comment.
Secondly, I wasn't sure whether to work with global variables or returning the array. I decided to go for the second one, but this was where I would have loved to have an environment test, to make sure it doesn't leak. Many programming languages in my head lead to not remembering how their variables work.
Anyways, I returned the function changeTo, which goes through the neighboring pixels, check if their color matches with the one I work with, and changes to the one I want.

If I'm not mistaken, the time complexity is O(n), being n the number of pixels to change their color. However, I also thought that working with a 2-dimesion array leads to a O(nÂ²) time complexity. Therefore, I let you choose which one is the real one.
On the other hand, the space complexity is O(1), since I'm creating only one new variable.


The second challege was much more difficult, but having tests to work with made a huge difference. I decided to work by default with as much as 26 nodes, but it can get as big as desired as long as the array "nodo" gets more characters added.
First, I created the functions "list_to_dict" and "dict_to_list", which turn, as their names say, lists (arrays) into dictionaries and viceversa. Secondly, I coded the "find" and "ciclo" functions, in order to detect cycles in the graph, basing myself in the DFS algorithm. Lastly, I defined the "find_path" function, which finds the path between two nodes. Both, in the "ciclo" and "find_path" functions, I made sure to work with the correct type of data, list in "ciclo" and dictionary in "find_path".


The third challenge was a bit tricky as well. I needed a lot of tries and a lot of debugging to get everything working as I expected. To solve this quiz, I decided to use many auxiliar functions.
In order to code DPI, I created the function "dpi", which gets the DPI, as its name says, it needs the "x_norm" function. The "x_norm" function is used to normalizes the values in the array, this is solve thanks to the algorithm in the pdf. However, this [x_norm] function wasn't perfect and crashed if x_max and x_min were the same, therefore I had to change it a bit, and I supposed that if that happened, the x_norm would be 1 - |x - x_max| / x_max (being |x| the absolute value of x); unless x_max was 0, where x_norm would be 0 if x was lower than 0.5 and 1 in any other situation.
The DPI function also depends on the "array_max_min" function, which gets the maximum and minimum values of the array from the csv file of every column. This is done thanks to the "columna" and the "max_min" functions. The "columna" function creates a new array with every value in the column you desire. Whereas, the "max_min" function gets the 98th and 2nd percentile, as described in the pdf. The percentiles are obtained through the "percentile" function that I coded. This way, we obtain, through the "array_max_min" function, 2 arrays with the values of the 7 last columns needed in the "x_norm" function.
Lastly, I coded 2 more functions: "csv_to_py", that transforms the csv file into a python matrix, deletes the first row, which contains the names, and converts every value into float numbers; and "vals", which gets all the asked values, thanks to the numpy library, and the "percentile" function. The median was obtained through the 50th percentile. All the values are transformed into a 2-decimal number for an faster comprehension.
The data obtained from this program allows the client to know whether a new product performs better than other amongst its own, and amongst its rivalry. As an example, if a client releases a product with a DPI of 7.55, and its 75th percentile has a DPI of 7.94, but the competence's doesn't go higher than 7.5; then the product would depend on the mean, median and 25th percentile amongst the client, but it would be great amongst the competition. 