In the first challenge, I noticed that not having a test environment was a problem for me. I'm used to testing and debugging to get my code to work. However, let me explain my code:
First of all, I discover the color I will have to work with, with the supposition written as a comment.
Secondly, I wasn't sure whether to work with global variables or returning the array. I decided to go for the second one, but this was where I would have loved to have an environment test, to make sure it doesn't leak. Many programming languages in my head lead to not remembering how their variables work.
Anyways, I returned the function changeTo, which goes through the neighboring pixels, check if their color matches with the one I work with, and changes to the one I want.

If I'm not mistaken, the time complexity is O(n), being n the number of pixels to change their color. However, I also thought that working with a 2-dimesion array leads to a O(n²) time complexity. Therefore, I let you choose which one is the real one.
On the other hand, the space complexity is O(1), since I'm creating only one new variable.


The second challege was much more difficult, but having tests to work with made a huge difference. I decided to work by default with as much as 26 nodes, but it can get as big as desired as long as the array "nodo" gets more characters added.
First, I created the functions "list_to_dict" and "dict_to_list", which turn, as their names say, lists (arrays) into dictionaries and viceversa. Secondly, I coded the "find" and "ciclo" functions, in order to detect cycles in the graph, basing myself in the DFS algorithm. Lastly, I defined the "find_path" function, which finds the path between two nodes. Both, in the "ciclo" and "find_path" functions, I made sure to work with the correct type of data, list in "ciclo" and dictionary in "find_path".

Complexity wise, it depends on the function. However, there's one worth mentioning: "dict_to_list", which has a time complexity of O(n²), even though there are 4 for loops nested. This is due to having two of them containing the array "nodo" information, which is dependent on the number of nodes and not the information itself.